webpackJsonp([34],{"0Q8/":function(s,a,t){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var n={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("p",[s._v("这里总结了一些JS中的基础概念")]),s._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://www.notion.so/JS-2-set-map-82e4f9f01e894532a5d57733fa933ebd"}},[s._v("深拷贝、浅拷贝")])]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.notion.so/JS-2-set-map-82e4f9f01e894532a5d57733fa933ebd"}},[s._v("Set 和 Map 数据结构")])])]),s._v(" "),t("h1",[s._v("一、深拷贝、浅拷贝")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.jianshu.com/p/1c142ec2ca45"}},[s._v("js浅拷贝与深拷贝的区别和实现方式")])]),s._v(" "),t("h3",[s._v("简单理解：")]),s._v(" "),t("ol",[t("li",[s._v("JS中，基础数据类型存放在栈中，引用数据类型存放在堆中，而栈中存放的只是指向堆中的值的指针；")]),s._v(" "),t("li",[s._v("如果我们复制一个引用数据类型，只是复制了指针，其实指向的是同一个值，那么通过一个指针改变值，另一个也会跟着改变。")]),s._v(" "),t("li",[s._v("深拷贝与浅拷贝，简单点来说，就是假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，说明这是浅拷贝，拿人手短，如果B没变，那就是深拷贝，自食其力。")])]),s._v(" "),t("h2",[s._v("1、实现浅拷贝的方法")]),s._v(" "),t("p",[t("strong",[s._v("1）for···in只循环第一层，则第一层不会随之改变，而没有被循环到的下一层都是浅拷贝，会随之改变")])]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-comment"},[s._v("// 只复制第一层的浅拷贝")]),s._v("\n"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("simpleCopy")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("obj1")]),s._v(") ")]),s._v("{\n   "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" obj2 = "),t("span",{staticClass:"hljs-built_in"},[s._v("Array")]),s._v(".isArray(obj1) ? [] : {};\n   "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" i "),t("span",{staticClass:"hljs-keyword"},[s._v("in")]),s._v(" obj1) {\n   obj2[i] = obj1[i];\n  }\n   "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" obj2;\n}\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" obj1 = {\n   "),t("span",{staticClass:"hljs-attr"},[s._v("a")]),s._v(": "),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(",\n   "),t("span",{staticClass:"hljs-attr"},[s._v("b")]),s._v(": "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(",\n   "),t("span",{staticClass:"hljs-attr"},[s._v("c")]),s._v(": {\n         "),t("span",{staticClass:"hljs-attr"},[s._v("d")]),s._v(": "),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("\n      }\n}\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" obj2 = simpleCopy(obj1);\nobj2.a = "),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(";\nobj2.c.d = "),t("span",{staticClass:"hljs-number"},[s._v("4")]),s._v(";\nalert(obj1.a); "),t("span",{staticClass:"hljs-comment"},[s._v("// 1")]),s._v("\nalert(obj2.a); "),t("span",{staticClass:"hljs-comment"},[s._v("// 3")]),s._v("\nalert(obj1.c.d); "),t("span",{staticClass:"hljs-comment"},[s._v("// 4")]),s._v("\nalert(obj2.c.d); "),t("span",{staticClass:"hljs-comment"},[s._v("// 4")]),s._v("\n")])]),s._v(" "),t("p",[t("strong",[s._v("（2）Object.assign方法")])]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" obj = {\n    "),t("span",{staticClass:"hljs-attr"},[s._v("a")]),s._v(": "),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(",\n    "),t("span",{staticClass:"hljs-attr"},[s._v("b")]),s._v(": "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("\n}\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" obj1 = "),t("span",{staticClass:"hljs-built_in"},[s._v("Object")]),s._v(".assign(obj);\nobj1.a = "),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(";\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(obj.a) "),t("span",{staticClass:"hljs-comment"},[s._v("// 3")]),s._v("\n")])]),s._v(" "),t("p",[t("strong",[s._v("（3）直接用=赋值，对于数组、对象，都属于浅拷贝")])]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" a=["),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("4")]),s._v("],\n    b=a;\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(a===b); "),t("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\na["),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("]="),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(";\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(a,b); "),t("span",{staticClass:"hljs-comment"},[s._v("// [1,1,2,3,4][1,1,2,3,4]")]),s._v("\n")])]),s._v(" "),t("h2",[s._v("2、 实现深拷贝的方法")]),s._v(" "),t("p",[t("strong",[s._v("（1）采用递归去拷贝所有层级属性  (手写一个深拷贝)")])]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("deepClone")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("obj")]),s._v(")")]),s._v("{\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" objClone = "),t("span",{staticClass:"hljs-built_in"},[s._v("Array")]),s._v(".isArray(obj)?[]:{};\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v("(obj && "),t("span",{staticClass:"hljs-keyword"},[s._v("typeof")]),s._v(" obj==="),t("span",{staticClass:"hljs-string"},[s._v('"object"')]),s._v("){\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v("("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" key "),t("span",{staticClass:"hljs-keyword"},[s._v("in")]),s._v(" obj){\n            "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v("(obj.hasOwnProperty(key)){\n                "),t("span",{staticClass:"hljs-comment"},[s._v("//判断ojb子元素是否为对象，如果是，递归复制")]),s._v("\n                "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v("(obj[key] && "),t("span",{staticClass:"hljs-keyword"},[s._v("typeof")]),s._v(" obj[key] ==="),t("span",{staticClass:"hljs-string"},[s._v('"object"')]),s._v("){\n                    objClone[key] = deepClone(obj[key]);\n                }"),t("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v("{\n                    "),t("span",{staticClass:"hljs-comment"},[s._v("//如果不是，简单复制")]),s._v("\n                    objClone[key] = obj[key];\n                }\n            }\n        }\n    }\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" objClone;\n}    \n"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" a=["),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("4")]),s._v("],\n    b=deepClone(a);\na["),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("]="),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(";\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(a,b);\n")])]),s._v(" "),t("p",[t("strong",[s._v("（2） 通过JSON对象来实现深拷贝 ，序列化反序列化")])]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("deepClone2")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("obj")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" _obj = "),t("span",{staticClass:"hljs-built_in"},[s._v("JSON")]),s._v(".stringify(obj),\n    objClone = "),t("span",{staticClass:"hljs-built_in"},[s._v("JSON")]),s._v(".parse(_obj);\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" objClone;\n}\n缺点： 无法实现对对象中方法的深拷贝，会显示为"),t("span",{staticClass:"hljs-literal"},[s._v("undefined")]),s._v("\n")])]),s._v(" "),t("p",[t("strong",[s._v("（3）通过jQuery的extend方法实现深拷贝")])]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" array = ["),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(","),t("span",{staticClass:"hljs-number"},[s._v("4")]),s._v("];\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" newArray = $.extend("),t("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(",[],array); "),t("span",{staticClass:"hljs-comment"},[s._v("// true为深拷贝，false为浅拷贝")]),s._v("\n")])]),s._v(" "),t("p",[t("strong",[s._v("（4）lodash函数库实现深拷贝")])]),s._v(" "),t("p",[t("code",[s._v("let result = _.cloneDeep(test)")])]),s._v(" "),t("p",[t("strong",[s._v("（5）手动实现深拷贝,手动将一个对象的值一个个赋值给另一个对象")])]),s._v(" "),t("p",[s._v("（）如果对象的value是基本类型的话，也可以用Object.assign来实现深拷贝，但是要把它赋值给一个空对象")]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" obj = {\n    "),t("span",{staticClass:"hljs-attr"},[s._v("a")]),s._v(": "),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(",\n    "),t("span",{staticClass:"hljs-attr"},[s._v("b")]),s._v(": "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("\n}\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" obj1 = "),t("span",{staticClass:"hljs-built_in"},[s._v("Object")]),s._v(".assign({}, obj); "),t("span",{staticClass:"hljs-comment"},[s._v("// obj赋值给一个空{}")]),s._v("\nobj1.a = "),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(";\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(obj.a)；"),t("span",{staticClass:"hljs-comment"},[s._v("// 1")]),s._v("\n")])]),s._v(" "),t("p",[t("strong",[s._v("（6）用slice实现对数组的深拷贝")])]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-comment"},[s._v("// 当数组里面的值是基本数据类型，比如String，Number，Boolean时，属于深拷贝")]),s._v("\n"),t("span",{staticClass:"hljs-comment"},[s._v("// 当数组里面的值是引用数据类型，比如Object，Array时，属于浅拷贝")]),s._v("\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" arr1 = ["),t("span",{staticClass:"hljs-string"},[s._v('"1"')]),s._v(","),t("span",{staticClass:"hljs-string"},[s._v('"2"')]),s._v(","),t("span",{staticClass:"hljs-string"},[s._v('"3"')]),s._v("]; \n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" arr2 = arr1.slice("),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(");\narr2["),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("] = "),t("span",{staticClass:"hljs-string"},[s._v('"9"')]),s._v(";\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v('"数组的原始值："')]),s._v(" + arr1 );\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v('"数组的新值："')]),s._v(" + arr2 );\n")])]),s._v(" "),t("p",[t("strong",[s._v("（7）用concat实现对数组的深拷贝")])]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-comment"},[s._v("// 当数组里面的值是基本数据类型，比如String，Number，Boolean时，属于深拷贝")]),s._v("\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" arr1 = ["),t("span",{staticClass:"hljs-string"},[s._v('"1"')]),s._v(","),t("span",{staticClass:"hljs-string"},[s._v('"2"')]),s._v(","),t("span",{staticClass:"hljs-string"},[s._v('"3"')]),s._v("];\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" arr2 = arr1.concat();\narr2["),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("] = "),t("span",{staticClass:"hljs-string"},[s._v('"9"')]),s._v(";\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v('"数组的原始值："')]),s._v(" + arr1 );\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v('"数组的新值："')]),s._v(" + arr2 );\n"),t("span",{staticClass:"hljs-comment"},[s._v("// 当数组里面的值是引用数据类型，比如Object，Array时，属于浅拷贝")]),s._v("\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" arr1 = [{"),t("span",{staticClass:"hljs-attr"},[s._v("a")]),s._v(":"),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("},{"),t("span",{staticClass:"hljs-attr"},[s._v("b")]),s._v(":"),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("},{"),t("span",{staticClass:"hljs-attr"},[s._v("c")]),s._v(":"),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("}];\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" arr2 = arr1.concat();\narr2["),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("].a = "),t("span",{staticClass:"hljs-string"},[s._v('"9"')]),s._v(";\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v('"数组的原始值："')]),s._v(" + arr1["),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("].a ); "),t("span",{staticClass:"hljs-comment"},[s._v("// 数组的原始值：9")]),s._v("\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v('"数组的新值："')]),s._v(" + arr2["),t("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("].a ); "),t("span",{staticClass:"hljs-comment"},[s._v("// 数组的新值：9")]),s._v("\n")])]),s._v(" "),t("p",[t("strong",[s._v("(8)使用扩展运算符实现深拷贝")])]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-comment"},[s._v("// 当value是基本数据类型，比如String，Number，Boolean时，是可以使用拓展运算符进行深拷贝的")]),s._v("\n"),t("span",{staticClass:"hljs-comment"},[s._v("// 当value是引用类型的值，比如Object，Array，引用类型进行深拷贝也只是拷贝了引用地址，所以属于浅拷贝")]),s._v("\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" car = {"),t("span",{staticClass:"hljs-attr"},[s._v("brand")]),s._v(": "),t("span",{staticClass:"hljs-string"},[s._v('"BMW"')]),s._v(", "),t("span",{staticClass:"hljs-attr"},[s._v("price")]),s._v(": "),t("span",{staticClass:"hljs-string"},[s._v('"380000"')]),s._v(", "),t("span",{staticClass:"hljs-attr"},[s._v("length")]),s._v(": "),t("span",{staticClass:"hljs-string"},[s._v('"5米"')]),s._v("}\n"),t("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" car1 = { ...car, "),t("span",{staticClass:"hljs-attr"},[s._v("price")]),s._v(": "),t("span",{staticClass:"hljs-string"},[s._v('"500000"')]),s._v(" }\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(car1); "),t("span",{staticClass:"hljs-comment"},[s._v('// { brand: "BMW", price: "500000", length: "5米" }')]),s._v("\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(car); "),t("span",{staticClass:"hljs-comment"},[s._v('// { brand: "BMW", price: "380000", length: "5米" }')]),s._v("\n")])]),s._v(" "),t("h1",[s._v("二、set、map数据结构")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/set-map"}},[s._v("ES6 入门教程")])]),s._v(" "),t("h2",[s._v("理解")]),s._v(" "),t("ol",[t("li",[s._v("set集合，类似于数组，但是不含重复元素。可以理解为数组衍生出来的新的数据结构。")]),s._v(" "),t("li",[s._v("map映射，类似于对象，但是对象的健只能是字符串。可以理解为从对象衍生出来的。而Map“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。")])]),s._v(" "),t("h2",[s._v("1、set")]),s._v(" "),t("h3",[s._v("基本用法")]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("、初始化数组，数组去重\n"),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" "),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(" = new Set([1, 2, 3, 4, 4]);\n[..."),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v("]\n// [1, 2, 3, 4]\n去除数组的重复成员可以直接这样：[...new Set(array)]\n也可以用于，去除字符串里面的重复字符：[...new Set('ababbc')].join('')\n\n2、"),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v("中加入值，是不会类型转换的，相当于===，但是NaN不会重复添加。\nlet "),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(" = new Set();\nlet a = NaN;\nlet b = NaN;\n"),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".add(a);\n"),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".add(b);\n"),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(" // Set {"),t("span",{staticClass:"hljs-literal"},[s._v("NaN")]),s._v("}\n上面代码向 "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v(" 实例添加了两次"),t("span",{staticClass:"hljs-literal"},[s._v("NaN")]),s._v("，但是只会加入一个。这表明，在 "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v(" 内部，两个"),t("span",{staticClass:"hljs-literal"},[s._v("NaN")]),s._v("是相等的。\n\n另外，两个对象总是不相等的。\n"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" "),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(" = new Set();\n"),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".add({});\n"),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".size // 1\n"),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".add({});\n"),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".size // 2\n")])]),s._v(" "),t("h3",[s._v("Set 实例的属性和方法")]),s._v(" "),t("p",[s._v("Set是一个构造函数，set实例包括操作方法（用于操作数据）和遍历方法（用于遍历成员）。")]),s._v(" "),t("p",[t("strong",[s._v("操作方法：")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Set.prototype.add(value)")]),s._v("：添加某个值，返回 Set 结构本身。")]),s._v(" "),t("li",[t("code",[s._v("Set.prototype.delete(value)")]),s._v("：删除某个值，返回一个布尔值，表示删除是否成功。")]),s._v(" "),t("li",[t("code",[s._v("Set.prototype.has(value)")]),s._v("：返回一个布尔值，表示该值是否为"),t("code",[s._v("Set")]),s._v("的成员。")]),s._v(" "),t("li",[t("code",[s._v("Set.prototype.clear()")]),s._v("：清除所有成员，没有返回值。")])]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" s = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("();\ns.add("),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(").add("),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(").add("),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(");\n"),t("span",{staticClass:"hljs-comment"},[s._v("// 注意2被加入了两次")]),s._v("\ns.size "),t("span",{staticClass:"hljs-comment"},[s._v("// 2")]),s._v("\ns.has("),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(") "),t("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\ns.has("),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(") "),t("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\ns.has("),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(") "),t("span",{staticClass:"hljs-comment"},[s._v("// false")]),s._v("\ns.delete("),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(");\ns.has("),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(") "),t("span",{staticClass:"hljs-comment"},[s._v("// false")]),s._v("\n")])]),s._v(" "),t("p",[t("code",[s._v("**Array.from")]),s._v("方法可以将 Set 结构转为数组。**")]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" items = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("(["),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("4")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("5")]),s._v("]);\n"),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" array = "),t("span",{staticClass:"hljs-built_in"},[s._v("Array")]),s._v(".from(items);\n"),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("dedupe")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("array")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Array")]),s._v(".from("),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Set")]),s._v("(array));\n}\n"),t("span",{staticClass:"hljs-comment"},[s._v("// 数组去重")]),s._v("\ndedupe(["),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("]) "),t("span",{staticClass:"hljs-comment"},[s._v("// [1, 2, 3]")]),s._v("\n")])]),s._v(" "),t("p",[t("strong",[s._v("遍历方法：")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Set.prototype.keys()")]),s._v("：返回键名的遍历器")]),s._v(" "),t("li",[t("code",[s._v("Set.prototype.values()")]),s._v("：返回键值的遍历器,和键名一样")]),s._v(" "),t("li",[t("code",[s._v("Set.prototype.entries()")]),s._v("：返回键值对的遍历器")]),s._v(" "),t("li",[t("code",[s._v("Set.prototype.forEach()")]),s._v("：使用回调函数遍历每个成员")])]),s._v(" "),t("p",[s._v("Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致")]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" "),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(" = new Set(['red', 'green', 'blue']);\n\nfor (let item of "),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".keys()) {\n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(item);\n}\n"),t("span",{staticClass:"hljs-comment"},[s._v("// red")]),s._v("\n"),t("span",{staticClass:"hljs-comment"},[s._v("// green")]),s._v("\n"),t("span",{staticClass:"hljs-comment"},[s._v("// blue")]),s._v("\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" item "),t("span",{staticClass:"hljs-keyword"},[s._v("of")]),s._v(" "),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".values()) {\n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(item);\n}\n"),t("span",{staticClass:"hljs-comment"},[s._v("// red")]),s._v("\n"),t("span",{staticClass:"hljs-comment"},[s._v("// green")]),s._v("\n"),t("span",{staticClass:"hljs-comment"},[s._v("// blue")]),s._v("\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" item "),t("span",{staticClass:"hljs-keyword"},[s._v("of")]),s._v(" "),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(".entries()) {\n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(item);\n}\n"),t("span",{staticClass:"hljs-comment"},[s._v('// ["red", "red"]')]),s._v("\n"),t("span",{staticClass:"hljs-comment"},[s._v('// ["green", "green"]')]),s._v("\n"),t("span",{staticClass:"hljs-comment"},[s._v('// ["blue", "blue"]')]),s._v("\n")])]),s._v(" "),t("p",[t("strong",[s._v("new Set[]将数组转为Set,[...set]扩展可将set转为数组(或者利用Array.from方法)，数组的"),t("code",[s._v("map")]),s._v("和"),t("code",[s._v("filter")]),s._v("方法也可以间接用于 Set 了。")])]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" "),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(" = new Set([1, 2, 3]);\n"),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(" = new Set([..."),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v("].map(x => x * 2));\n// 返回Set结构：{"),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("4")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("6")]),s._v("}\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" "),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(" = new Set([1, 2, 3, 4, 5]);\n"),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v(" = new Set([..."),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v("].filter(x => (x % 2) == 0));\n// 返回Set结构：{"),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(", "),t("span",{staticClass:"hljs-number"},[s._v("4")]),s._v("}\n")])]),s._v(" "),t("h2",[s._v("2、Map")]),s._v(" "),t("h3",[s._v("含义和基本用法")]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-built_in"},[s._v("Map")]),s._v(" 结构的"),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v("方法，将对象o当作m的一个键，然后又使用"),t("span",{staticClass:"hljs-keyword"},[s._v("get")]),s._v("方法读取这个键，\n接着使用delete方法删除了这个键\nconst m = new Map();\nconst o = {p: "),t("span",{staticClass:"hljs-string"},[s._v("'Hello World'")]),s._v("};\n\nm.set(o, "),t("span",{staticClass:"hljs-string"},[s._v("'content'")]),s._v(")\nm.get(o) "),t("span",{staticClass:"hljs-comment"},[s._v('// "content"')]),s._v("\n\nm.has(o) "),t("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\nm.delete(o) "),t("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\nm.has(o) "),t("span",{staticClass:"hljs-comment"},[s._v("// false")]),s._v("\n"),t("span",{staticClass:"hljs-comment"},[s._v("// 作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组")]),s._v("\n"),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" map = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Map")]),s._v("([\n  ["),t("span",{staticClass:"hljs-string"},[s._v("'name'")]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v("'张三'")]),s._v("],\n  ["),t("span",{staticClass:"hljs-string"},[s._v("'title'")]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v("'Author'")]),s._v("]\n]);\n\nmap.size "),t("span",{staticClass:"hljs-comment"},[s._v("// 2")]),s._v("\nmap.has("),t("span",{staticClass:"hljs-string"},[s._v("'name'")]),s._v(") "),t("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\nmap.get("),t("span",{staticClass:"hljs-string"},[s._v("'name'")]),s._v(") "),t("span",{staticClass:"hljs-comment"},[s._v('// "张三"')]),s._v("\nmap.has("),t("span",{staticClass:"hljs-string"},[s._v("'title'")]),s._v(") "),t("span",{staticClass:"hljs-comment"},[s._v("// true")]),s._v("\nmap.get("),t("span",{staticClass:"hljs-string"},[s._v("'title'")]),s._v(") "),t("span",{staticClass:"hljs-comment"},[s._v('// "Author"')]),s._v("\n"),t("span",{staticClass:"hljs-comment"},[s._v("// 注意，只有对同一个对象的引用，Map 结构才将其视为同一个键。这一点要非常小心。")]),s._v("\n"),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" map = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Map")]),s._v("();\nmap.set(["),t("span",{staticClass:"hljs-string"},[s._v("'a'")]),s._v("], "),t("span",{staticClass:"hljs-number"},[s._v("555")]),s._v(");\nmap.get(["),t("span",{staticClass:"hljs-string"},[s._v("'a'")]),s._v("]) "),t("span",{staticClass:"hljs-comment"},[s._v("// undefined")]),s._v("\n上面代码的"),t("span",{staticClass:"hljs-keyword"},[s._v("set")]),s._v("和"),t("span",{staticClass:"hljs-keyword"},[s._v("get")]),s._v("方法，表面是针对同一个键，但实际上这是两个不同的数组实例，\n内存地址是不一样的，因此"),t("span",{staticClass:"hljs-keyword"},[s._v("get")]),s._v("方法无法读取该键，返回undefined\n\n")])]),s._v(" "),t("h3",[s._v("实例的属性和操作方法")]),s._v(" "),t("p",[t("strong",[s._v("（1）size 属性")])]),s._v(" "),t("p",[t("code",[s._v("size")]),s._v("属性返回 Map 结构的成员总数。")]),s._v(" "),t("p",[t("strong",[s._v("（2）Map.prototype.set(key, value)")])]),s._v(" "),t("p",[s._v("set方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。")]),s._v(" "),t("p",[s._v("set方法返回的是当前的Map对象，因此可以采用链式写法。")]),s._v(" "),t("p",[t("strong",[s._v("（3）Map.prototype.get(key)")])]),s._v(" "),t("p",[t("code",[s._v("get")]),s._v("方法读取"),t("code",[s._v("key")]),s._v("对应的键值，如果找不到"),t("code",[s._v("key")]),s._v("，返回"),t("code",[s._v("undefined")]),s._v("。")]),s._v(" "),t("p",[t("strong",[s._v("（4）Map.prototype.has(key)")])]),s._v(" "),t("p",[t("code",[s._v("has")]),s._v("方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。")]),s._v(" "),t("p",[t("strong",[s._v("（5）Map.prototype.delete(key)")])]),s._v(" "),t("p",[t("code",[s._v("delete")]),s._v("方法删除某个键，返回"),t("code",[s._v("true")]),s._v("。如果删除失败，返回"),t("code",[s._v("false")]),s._v("。")]),s._v(" "),t("p",[t("strong",[s._v("（6）Map.prototype.clear()")])]),s._v(" "),t("p",[t("code",[s._v("clear")]),s._v("方法清除所有成员，没有返回值。")]),s._v(" "),t("p",[t("strong",[s._v("遍历方法")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Map.prototype.keys()")]),s._v("：返回键名的遍历器。")]),s._v(" "),t("li",[t("code",[s._v("Map.prototype.values()")]),s._v("：返回键值的遍历器。")]),s._v(" "),t("li",[t("code",[s._v("Map.prototype.entries()")]),s._v("：返回所有成员的遍历器。")]),s._v(" "),t("li",[t("code",[s._v("Map.prototype.forEach()")]),s._v("：遍历 Map 的所有成员。")])]),s._v(" "),t("p",[s._v("Map 结构转为数组结构，比较快速的方法是使用扩展运算符（...）。")]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" map = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Map")]),s._v("([\n  ["),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v("'one'")]),s._v("],\n  ["),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v("'two'")]),s._v("],\n  ["),t("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v("'three'")]),s._v("],\n]);\n\n[...map.keys()]\n"),t("span",{staticClass:"hljs-comment"},[s._v("// [1, 2, 3]")]),s._v("\n\n[...map.values()]\n"),t("span",{staticClass:"hljs-comment"},[s._v("// ['one', 'two', 'three']")]),s._v("\n\n[...map.entries()]\n"),t("span",{staticClass:"hljs-comment"},[s._v("// [[1,'one'], [2, 'two'], [3, 'three']]")]),s._v("\n\n[...map]\n"),t("span",{staticClass:"hljs-comment"},[s._v("// [[1,'one'], [2, 'two'], [3, 'three']]")]),s._v("\n")])]),s._v(" "),t("p",[t("strong",[s._v("Map 转为对象")])]),s._v(" "),t("p",[s._v("如果所有 Map 的键都是字符串，它可以无损地转为对象。")]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("strMapToObj")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("strMap")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" obj = "),t("span",{staticClass:"hljs-built_in"},[s._v("Object")]),s._v(".create("),t("span",{staticClass:"hljs-literal"},[s._v("null")]),s._v(");\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" [k,v] "),t("span",{staticClass:"hljs-keyword"},[s._v("of")]),s._v(" strMap) {\n    obj[k] = v;\n  }\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" obj;\n}\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" myMap = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Map")]),s._v("()\n  .set("),t("span",{staticClass:"hljs-string"},[s._v("'yes'")]),s._v(", "),t("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(")\n  .set("),t("span",{staticClass:"hljs-string"},[s._v("'no'")]),s._v(", "),t("span",{staticClass:"hljs-literal"},[s._v("false")]),s._v(");\nstrMapToObj(myMap)\n"),t("span",{staticClass:"hljs-comment"},[s._v("// { yes: true, no: false }")]),s._v("\n\n")])]),s._v(" "),t("p",[s._v("如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。")]),s._v(" "),t("p",[t("strong",[s._v("对象转为 Map")])]),s._v(" "),t("p",[s._v("对象转为 Map 可以通过"),t("code",[s._v("Object.entries()")]),s._v("。")]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" obj = {"),t("span",{staticClass:"hljs-string"},[s._v('"a"')]),s._v(":"),t("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v('"b"')]),s._v(":"),t("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("};\n"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" map = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Map")]),s._v("("),t("span",{staticClass:"hljs-built_in"},[s._v("Object")]),s._v(".entries(obj));\n")])])])}]},l=t("VU/8")(null,n,!1,null,null,null);a.default=l.exports},"GIt/":function(s,a,t){s.exports=t("0Q8/")}});
//# sourceMappingURL=34.a027cc4a3fe3dd0c9d6e.js.map