webpackJsonp([7],{VLWS:function(s,a,t){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var _={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("p",[s._v("参考文章：")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://webpack.docschina.org/concepts/"}},[s._v("概念 | webpack 中文文档")])]),s._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6844903780123672590"}},[s._v("Webpack系列-第一篇基础杂记")])]),s._v(" "),t("p",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000006178770"}},[s._v("入门 Webpack，看这篇就够了")])]),s._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/bandaoyu/article/details/104562824"}},[s._v("【前端】webpack、npm、node、nodejs之间的关系_bandaoyu的博客-CSDN博客_webpack和nodejs关系")])]),s._v(" "),t("h1",[s._v("一、介绍")]),s._v(" "),t("pre",[t("code",[s._v("    Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。\n\n    打个比方就是我们搭建一个项目好比搭建一个房子，我们把所需要的材料（js文件、图片等）交给webpack，最后webpack会帮我们做好一切，并把房子（即bundle）输出。\n")])]),s._v(" "),t("h1",[s._v("二、一些基础概念")]),s._v(" "),t("h2",[s._v("loader")]),s._v(" "),t("p",[s._v("webpack核心，webpack本身只能识别js文件，对于非js文件，即需要loader转换为js文件。换句话说，,Loader就是资源转换器。由于在webpack里，所有的资源都是模块，不同资源都最终转化成js去处理。针对不同形式的资源采用不同的Loader去编译，这就是Loader的意义。")]),s._v(" "),t("h2",[s._v("插件")]),s._v(" "),t("p",[s._v("插件在 webpack 的配置信息 plugins 选项中指定，用于完成一些 loader 不能完成的工作。")]),s._v(" "),t("p",[s._v("webpack核心，loader处理非js文件，那么插件可以有更广泛的用途。整个webpack其实就是各类的插件形成的，插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。")]),s._v(" "),t("h3",[s._v("loader和插件的区别")]),s._v(" "),t("p",[s._v("Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用")]),s._v(" "),t("h2",[s._v("entry(入口)")]),s._v(" "),t("p",[s._v("入口起点(entry point)即是webpack通过该起点找到本次项目所直接或间接依赖的资源（模块、库等），并对其进行处理，最后输出到bundle中。入口文件由用户自定义，可以是一个或者多个，每一个entry最后对应一个bundle。")]),s._v(" "),t("h2",[s._v("output(出口)")]),s._v(" "),t("p",[s._v("通过配置output属性可以告诉webpack将bundle命名并输出到对应的位置。")]),s._v(" "),t("h2",[s._v("Chunk")]),s._v(" "),t("p",[s._v("被entry所依赖的额外的代码块，同样可以包含一个或者多个文件。chunk也就是一个个的js文件，在异步加载中用处很大。chunk实际上就是webpack打包后的产物，如果你不想最后生成一个包含所有的bundle，那么可以生成一个个chunk，并通过按需加载引入。同时它还能通过插件提取公共依赖生成公共chunk,避免多个bundle中有多个相同的依赖代码。")]),s._v(" "),t("h1",[s._v("三、配置文件")]),s._v(" "),t("p",[s._v("创建webpack.config.js文件，示例代码如下所示：更多可见官网："),t("a",{attrs:{href:"https://webpack.js.org/guides/"}},[s._v("https://webpack.js.org/guides/")])]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" path = "),t("span",{staticClass:"hljs-built_in"},[s._v("require")]),s._v("("),t("span",{staticClass:"hljs-string"},[s._v("'path'")]),s._v(")\n"),t("span",{staticClass:"hljs-built_in"},[s._v("module")]),s._v(".exports = {\n\t\t"),t("span",{staticClass:"hljs-attr"},[s._v("entry")]),s._v(": "),t("span",{staticClass:"hljs-string"},[s._v('"./runoob1.js"')]),s._v(", "),t("span",{staticClass:"hljs-comment"},[s._v("// 入口文件")]),s._v("\n    "),t("span",{staticClass:"hljs-attr"},[s._v("output")]),s._v(": {\n        "),t("span",{staticClass:"hljs-attr"},[s._v("path")]),s._v(": __dirname,\n        "),t("span",{staticClass:"hljs-attr"},[s._v("filename")]),s._v(": "),t("span",{staticClass:"hljs-string"},[s._v('"bundle.js"')]),s._v(" "),t("span",{staticClass:"hljs-comment"},[s._v("// 出口文件")]),s._v("\n    },\n  "),t("span",{staticClass:"hljs-attr"},[s._v("devServer")]),s._v(": {\n    "),t("span",{staticClass:"hljs-attr"},[s._v("historyApiFallback")]),s._v(": "),t("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(",\n    "),t("span",{staticClass:"hljs-attr"},[s._v("host")]),s._v(": "),t("span",{staticClass:"hljs-string"},[s._v("'0.0.0.0'")]),s._v(",\n    "),t("span",{staticClass:"hljs-comment"},[s._v("// 启用 webpack 的 模块热替换 功能")]),s._v("\n    "),t("span",{staticClass:"hljs-attr"},[s._v("hot")]),s._v(": "),t("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(",\n    "),t("span",{staticClass:"hljs-attr"},[s._v("hotOnly")]),s._v(": "),t("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(",\n    "),t("span",{staticClass:"hljs-attr"},[s._v("inline")]),s._v(": "),t("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(",\n    "),t("span",{staticClass:"hljs-comment"},[s._v("// 用于nginx配置 不检查host")]),s._v("\n    "),t("span",{staticClass:"hljs-attr"},[s._v("disableHostCheck")]),s._v(": "),t("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(",\n    "),t("span",{staticClass:"hljs-comment"},[s._v("// open: 'Google Chrome',")]),s._v("\n    "),t("span",{staticClass:"hljs-attr"},[s._v("proxy")]),s._v(": { "),t("span",{staticClass:"hljs-comment"},[s._v("// 接口代理")]),s._v("\n      "),t("span",{staticClass:"hljs-string"},[s._v("'/api'")]),s._v(": {\n        "),t("span",{staticClass:"hljs-attr"},[s._v("target")]),s._v(": "),t("span",{staticClass:"hljs-string"},[s._v("'http://ipm-his-web-service-qa4.guahao-test.com/'")]),s._v(",\n        "),t("span",{staticClass:"hljs-attr"},[s._v("changeOrigin")]),s._v(": "),t("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(",\n      },\n    },\n    "),t("span",{staticClass:"hljs-attr"},[s._v("headers")]),s._v(": {\n      "),t("span",{staticClass:"hljs-comment"},[s._v("// Friday: 配置允许跨域请求所有静态资源")]),s._v("\n      "),t("span",{staticClass:"hljs-string"},[s._v("'Access-Control-Allow-Origin'")]),s._v(": "),t("span",{staticClass:"hljs-string"},[s._v("'*'")]),s._v(",\n    },\n  },\n  "),t("span",{staticClass:"hljs-attr"},[s._v("module")]),s._v(": {\n    "),t("span",{staticClass:"hljs-attr"},[s._v("rules")]),s._v(": [\n      loaders: [\n            { "),t("span",{staticClass:"hljs-attr"},[s._v("test")]),s._v(": "),t("span",{staticClass:"hljs-regexp"},[s._v("/\\.css$/")]),s._v(", "),t("span",{staticClass:"hljs-attr"},[s._v("loader")]),s._v(": "),t("span",{staticClass:"hljs-string"},[s._v('"style-loader!css-loader"')]),s._v(" } "),t("span",{staticClass:"hljs-comment"},[s._v("// loader加载器")]),s._v("\n        ]\n    ],\n  },\n}\n")])]),s._v(" "),t("h1",[s._v("四、动手写一个webpack插件")]),s._v(" "),t("p",[s._v("忽略，见")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6844903789804126222"}},[s._v("webpack-插件机制杂记")])]),s._v(" "),t("blockquote",[t("p",[s._v("Webpack本身并不难于理解，难的是各种各样的配置和周围生态带来的复杂，然而也是这种复杂给我们带来了极高的便利性，理解这些有助于在搭建项目更好的优化。后面会继续写出两篇总结，分别是webpack的内部原理流程和webpack的插件开发原理。")])]),s._v(" "),t("h1",[s._v("五、常见问题")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/gaoht/p/11310365.html"}},[s._v("关于webpack的面试题")])]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/fsg6/p/14497415.html"}},[s._v("Webpack-- 常见面试题")])]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.jianshu.com/p/e80d38661358"}},[s._v("webpack面试题")])]),s._v(" "),t("p",[s._v("以下总结几个最常见的：")]),s._v(" "),t("h2",[s._v("1. webpack打包原理、流程")]),s._v(" "),t("p",[s._v("Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：")]),s._v(" "),t("ol",[t("li",[s._v("初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；")]),s._v(" "),t("li",[s._v("开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；")]),s._v(" "),t("li",[s._v("确定入口：根据配置中的 entry 找出所有的入口文件；")]),s._v(" "),t("li",[s._v("编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")]),s._v(" "),t("li",[s._v("完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；")]),s._v(" "),t("li",[s._v("输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；")]),s._v(" "),t("li",[s._v("输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。")])]),s._v(" "),t("p",[s._v("在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。")]),s._v(" "),t("h2",[s._v("2、webpack常用的loader和plugin插件")]),s._v(" "),t("p",[t("strong",[s._v("loader:")])]),s._v(" "),t("ul",[t("li",[s._v("file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件")]),s._v(" "),t("li",[s._v("url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去")]),s._v(" "),t("li",[s._v("source-map-loader：加载额外的 Source Map 文件，以方便断点调试")]),s._v(" "),t("li",[s._v("image-loader：加载并且压缩图片文件")]),s._v(" "),t("li",[s._v("babel-loader：把 ES6 转换成 ES5")]),s._v(" "),t("li",[s._v("css-loader：加载 CSS，支持模块化、压缩、文件导入等特性")]),s._v(" "),t("li",[s._v("style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。")]),s._v(" "),t("li",[s._v("eslint-loader：通过 ESLint 检查 JavaScript 代码")])]),s._v(" "),t("p",[t("strong",[s._v("plugin:")])]),s._v(" "),t("ul",[t("li",[s._v("define-plugin：定义环境变量")]),s._v(" "),t("li",[s._v("commons-chunk-plugin：提取公共代码")]),s._v(" "),t("li",[s._v("uglifyjs-webpack-plugin：通过UglifyES压缩ES6代码")])]),s._v(" "),t("h2",[s._v("3、webpack和与grunt、gulp的不同")]),s._v(" "),t("p",[s._v("三者都是前端构建工具，grunt和gulp在早期比较流行，现在webpack相对来说比较主流，不过一些轻量化的任务还是会用gulp来处理，比如单独打包CSS文件等。")]),s._v(" "),t("p",[s._v("grunt和gulp是基于任务和流（Task、Stream）的。类似jQuery，找到一个（或一类）文件，对其做一系列链式操作，更新流上的数据， 整条链式操作构成了一个任务，多个任务就构成了整个web的构建流程。")]),s._v(" "),t("p",[s._v("webpack是基于入口的。webpack会自动地递归解析入口所需要加载的所有资源文件，然后用不同的Loader来处理不同的文件，用Plugin来扩展webpack功能。")]),s._v(" "),t("p",[s._v("所以总结一下：")]),s._v(" "),t("ul",[t("li",[s._v("从构建思路来说")])]),s._v(" "),t("p",[s._v("gulp和grunt需要开发者将整个前端构建过程拆分成多个"),t("code",[s._v("Task")]),s._v("，并合理控制所有"),t("code",[s._v("Task")]),s._v("的调用关系 webpack需要开发者找到入口，并需要清楚对于不同的资源应该使用什么Loader做何种解析和加工")]),s._v(" "),t("ul",[t("li",[s._v("对于知识背景来说")])]),s._v(" "),t("p",[s._v("gulp更像后端开发者的思路，需要对于整个流程了如指掌 webpack更倾向于前端开发者的思路")]),s._v(" "),t("h2",[s._v("4、webpack的配置，单页面及多页面")]),s._v(" "),t("p",[s._v("单页应用可以理解为webpack的标准模式，直接在entry中指定单页应用的入口即可，这里不再赘述")]),s._v(" "),t("p",[s._v("多页应用的话，可以使用webpack的 "),t("strong",[s._v("AutoWebPlugin")]),s._v("来完成简单自动化的构建，但是前提是项目的目录结构必须遵守他预设的规范。 多页应用中要注意的是：")]),s._v(" "),t("ul",[t("li",[s._v("每个页面都有公共的代码，可以将这些代码抽离出来，避免重复的加载。比如，每个页面都引用了同一套css样式表")]),s._v(" "),t("li",[s._v("随着业务的不断扩展，页面可能会不断的追加，所以一定要让入口的配置足够灵活，避免每次添加新页面还需要修改构建配置")])]),s._v(" "),t("h2",[s._v("5、webpack构建流程")]),s._v(" "),t("ol",[t("li",[s._v("初始化参数，从配置文件和shell语句中读到的参数合并，得到最后的参数")]),s._v(" "),t("li",[s._v("开始编译：用合并得到的参数初始化complier对象，加载是所有配置的插件，执行run方法开始编译")]),s._v(" "),t("li",[s._v("确定入口，通过entry找到入口文件")]),s._v(" "),t("li",[s._v("编译模块，从入口文件出发，调用所有配置的loader对模块进行解析翻译，在找到该模块依赖的模块进行处理")]),s._v(" "),t("li",[s._v("完成模块编译，得到每个模块被翻译之后的最终的内容和依赖关系")]),s._v(" "),t("li",[s._v("输出资源，根据入口和模块之间的依赖关系，组装成一个个包含多个模块的chunk，在把每个chunk转换成一个单独的文件加载到输出列表")]),s._v(" "),t("li",[s._v("输出完成，确定输出的路径和文件名，把内容写到文件系统中"),t("strong",[s._v("在以上过程中，webpack会在特定的时间点广播出特定的事件，插件在舰艇感兴趣的事件后会执行特定的逻辑，改变webpack的运行结果")])])]),s._v(" "),t("h2",[s._v("6、 webpack3和webpack4的区别")]),s._v(" "),t("p",[s._v("1.1. mode/–mode参数\n新增了mode/--mode参数来表示是开发还是生产（development/production）\nproduction 侧重于打包后的文件大小，development侧重于goujiansud\n1.2. 移除loaders，必须使用rules（在3版本的时候loaders和rules 是共存的但是到4的时候只允许使用rules）\n1.3. 移除了CommonsChunkPlugin (提取公共代码)，用optimization.splitChunks和optimization.runtimeChunk来代替\n1.4. 支持es6的方式导入JSON文件，并且可以过滤无用的代码")]),s._v(" "),t("p",[t("code",[s._v("let jsonData = require('./data.json') import jsonData from './data.json' import { first } from './data.json' // 打包时只会把first相关的打进去")])]),s._v(" "),t("p",[s._v("1.5. 升级happypack插件（happypack可以进行多线程加速打包）\n1.6.  ExtractTextWebpackPlugin调整，建议选用新的CSS文件提取kiii插件mini-css-extract-plugin，production模式，增加  minimizer")]),s._v(" "),t("h2",[s._v("7、"),t("strong",[s._v("如何在vue项目中实现按需加载？")])]),s._v(" "),t("p",[s._v("Vue UI组件库的按需加载 为了快速开发前端项目，经常会引入现成的UI组件库如ElementUI、iView等，但是他们的体积和他们所提供的功能一样，是很庞大的。 而通常情况下，我们仅仅需要少量的几个组件就足够了，但是我们却将庞大的组件库打包到我们的源码中，造成了不必要的开销。")]),s._v(" "),t("p",[s._v("不过很多组件库已经提供了现成的解决方案，如Element出品的babel-plugin-component和AntDesign出品的babel-plugin-import 安装以上插件后，在.babelrc配置中或babel-loader的参数中进行设置，即可实现组件按需加载了。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7d6fb3d5-035d-48db-aef9-62d49c6753a5/Untitled.png",alt:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7d6fb3d5-035d-48db-aef9-62d49c6753a5/Untitled.png"}})]),s._v(" "),t("p",[s._v("单页应用的按需加载 现在很多前端项目都是通过单页应用的方式开发的，但是随着业务的不断扩展，会面临一个严峻的问题——首次加载的代码量会越来越多，影响用户的体验。")]),s._v(" "),t("p",[s._v("通过import("),t("em",[s._v(")语句来控制加载时机，webpack内置了对于import(")]),s._v(")的解析，会将import("),t("em",[s._v(")中引入的模块作为一个新的入口在生成一个chunk。 当代码执行到import(")]),s._v(")语句时，会去加载Chunk对应生成的文件。import()会返回一个Promise对象，所以为了让浏览器支持，需要事先注入Promise polyfill")])])}]},v=t("VU/8")(null,_,!1,null,null,null);a.default=v.exports},fbis:function(s,a,t){s.exports=t("VLWS")}});
//# sourceMappingURL=7.6de2f4a471c6084fcc12.js.map