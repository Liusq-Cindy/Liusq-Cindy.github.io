webpackJsonp([30],{"5tt0":function(s,a,t){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var n={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("p",[s._v("参考文章：")]),s._v(" "),t("p",[s._v("promise的原理和源码：")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6844904063570542599"}},[s._v("这一次，彻底弄懂 Promise 原理")])]),s._v(" "),t("p",[s._v("promise的基础使用：看文档即可，文档很详细，此处不赘述")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/promise"}},[s._v("ES6 入门教程")])]),s._v(" "),t("h1",[s._v("一、基础含义")]),s._v(" "),t("h3",[s._v("基础要点")]),s._v(" "),t("ol",[t("li",[s._v("Promise是es6提供的一个原生对象，简单说就是一个容器，它可以获取异步操作的消息。有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。")]),s._v(" "),t("li",[s._v("ES6 规定，Promise对象是一个构造函数，用来生成Promise实例。")]),s._v(" "),t("li",[s._v("Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。")]),s._v(" "),t("li",[s._v("Promise对象提供统一的接口，如.then处理resolve，.catch处理reject，.all，.race处理多个promise使得控制异步操作更加容易。")])]),s._v(" "),t("h3",[s._v("代码演示")]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-built_in"},[s._v("Promise")]),s._v("构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" promise = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Promise")]),s._v("("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("resolve, reject")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-comment"},[s._v("// ... some code")]),s._v("\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" ("),t("span",{staticClass:"hljs-comment"},[s._v("/* 异步操作成功 */")]),s._v("){\n    resolve(value);\n"),t("span",{staticClass:"hljs-comment"},[s._v("// resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），")]),s._v("\n"),t("span",{staticClass:"hljs-comment"},[s._v("// 在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；")]),s._v("\n  } "),t("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n    reject(error);\n"),t("span",{staticClass:"hljs-comment"},[s._v("// reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），")]),s._v("\n"),t("span",{staticClass:"hljs-comment"},[s._v("// 在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。")]),s._v("\n  }\n});\n\n"),t("span",{staticClass:"hljs-built_in"},[s._v("Promise")]),s._v("实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。\n\npromise.then("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("value")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-comment"},[s._v("// success")]),s._v("\n}, "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("error")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-comment"},[s._v("// failure")]),s._v("\n});\n")])]),s._v(" "),t("p",[t("strong",[s._v("应用")])]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" promise = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Promise")]),s._v("("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("resolve, reject")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v("'Promise'")]),s._v(");\n  resolve();\n});\n\npromise.then("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v("'resolved.'")]),s._v(");\n});\n\n"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v("'Hi!'")]),s._v(");\n\n"),t("span",{staticClass:"hljs-comment"},[s._v("// Promise")]),s._v("\n"),t("span",{staticClass:"hljs-comment"},[s._v("// Hi!")]),s._v("\n"),t("span",{staticClass:"hljs-comment"},[s._v("// resolved")]),s._v("\n首先输出的是"),t("span",{staticClass:"hljs-built_in"},[s._v("Promise")]),s._v("。然后，then方法指定的回调函数，\n将在当前脚本所有同步任务执行完才会执行，所以resolved最后输出。\n")])]),s._v(" "),t("h1",[s._v("二、api操作")]),s._v(" "),t("h3",[s._v("Promise.prototype.then()")]),s._v(" "),t("p",[t("code",[s._v("then")]),s._v("方法的第一个参数是"),t("code",[s._v("resolved")]),s._v("状态的回调函数，第二个参数是"),t("code",[s._v("rejected")]),s._v("状态的回调函数，它们都是可选的。")]),s._v(" "),t("p",[t("code",[s._v("then")]),s._v("方法返回的是一个新的"),t("code",[s._v("Promise")]),s._v("实例（注意，不是原来那个"),t("code",[s._v("Promise")]),s._v("实例）。因此可以采用链式写法，即"),t("code",[s._v("then")]),s._v("方法后面再调用另一个"),t("code",[s._v("then")]),s._v("方法。")]),s._v(" "),t("h3",[s._v("Promise.prototype.catch()")]),s._v(" "),t("p",[s._v("Promise.prototype.catch()方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。")]),s._v(" "),t("h3",[s._v("Promise.prototype.finally()")]),s._v(" "),t("p",[s._v("finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作")]),s._v(" "),t("h3",[s._v("Promise.all()")]),s._v(" "),t("p",[t("code",[s._v("Promise.all()")]),s._v("方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。")]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" p = "),t("span",{staticClass:"hljs-built_in"},[s._v("Promise")]),s._v(".all([p1, p2, p3]);\n"),t("span",{staticClass:"hljs-comment"},[s._v("// p的状态由p1、p2、p3决定，是与的关系，只要有一个reject，就会reject，全部resolve才会resolve")]),s._v("\n")])]),s._v(" "),t("h3",[s._v("Promise.race()")]),s._v(" "),t("p",[t("code",[s._v("Promise.race()")]),s._v("方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。")]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" p = "),t("span",{staticClass:"hljs-built_in"},[s._v("Promise")]),s._v(".race([p1, p2, p3]);\n"),t("span",{staticClass:"hljs-comment"},[s._v("// 只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数")]),s._v("\n")])]),s._v(" "),t("h3",[s._v("Promise.allSettled()")]),s._v(" "),t("p",[t("code",[s._v("Promise.allSettled()")]),s._v("方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只有等到所有这些参数实例都返回结果，不管是"),t("code",[s._v("fulfilled")]),s._v("还是"),t("code",[s._v("rejected")]),s._v("，包装实例才会结束。")]),s._v(" "),t("h3",[s._v("Promise.any()")]),s._v(" "),t("p",[s._v("ES2021 引入了"),t("code",[s._v("[Promise.any()")]),s._v("方法](https://github.com/tc39/proposal-promise-any)。该方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。只要参数实例有一个变成"),t("code",[s._v("fulfilled")]),s._v("状态，包装实例就会变成"),t("code",[s._v("fulfilled")]),s._v("状态；如果所有参数实例都变成"),t("code",[s._v("rejected")]),s._v("状态，包装实例就会变成"),t("code",[s._v("rejected")]),s._v("状态")]),s._v(" "),t("h3",[s._v("Promise.resolve()")]),s._v(" "),t("p",[s._v("有时需要将现有对象转为 Promise 对象，"),t("code",[s._v("Promise.resolve()")]),s._v("方法就起到这个作用。")]),s._v(" "),t("pre",[t("code",[s._v("const jsPromise = Promise.resolve($.ajax('/whatever.json'));\n\n")])]),s._v(" "),t("p",[s._v("上面代码将 jQuery 生成的"),t("code",[s._v("deferred")]),s._v("对象，转为一个新的 Promise 对象。")]),s._v(" "),t("p",[t("code",[s._v("Promise.resolve()")]),s._v("等价于下面的写法。")]),s._v(" "),t("pre",[t("code",[s._v("Promise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n")])]),s._v(" "),t("h3",[s._v("Promise.reject()")]),s._v(" "),t("p",[t("code",[s._v("Promise.reject(reason)")]),s._v("方法也会返回一个新的 Promise 实例，该实例的状态为"),t("code",[s._v("rejected")]),s._v("。")]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" p = "),t("span",{staticClass:"hljs-built_in"},[s._v("Promise")]),s._v(".reject("),t("span",{staticClass:"hljs-string"},[s._v("'出错了'")]),s._v(");\n"),t("span",{staticClass:"hljs-comment"},[s._v("// 等同于")]),s._v("\n"),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" p = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Promise")]),s._v("("),t("span",{staticClass:"hljs-function"},[s._v("("),t("span",{staticClass:"hljs-params"},[s._v("resolve, reject")]),s._v(") =>")]),s._v(" reject("),t("span",{staticClass:"hljs-string"},[s._v("'出错了'")]),s._v("))\n\np.then("),t("span",{staticClass:"hljs-literal"},[s._v("null")]),s._v(", "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("s")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(s)\n});\n"),t("span",{staticClass:"hljs-comment"},[s._v("// 出错了")]),s._v("\n上面代码生成一个 "),t("span",{staticClass:"hljs-built_in"},[s._v("Promise")]),s._v(" 对象的实例p，状态为rejected，回调函数会立即执行。\n")])]),s._v(" "),t("h1",[s._v("三、应用")]),s._v(" "),t("h2",[s._v("加载图片")]),s._v(" "),t("p",[s._v("我们可以将图片的加载写成一个"),t("code",[s._v("Promise")]),s._v("，一旦加载完成，"),t("code",[s._v("Promise")]),s._v("的状态就发生变化。")]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" preloadImage = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("path")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Promise")]),s._v("("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" ("),t("span",{staticClass:"hljs-params"},[s._v("resolve, reject")]),s._v(") ")]),s._v("{\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" image = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};\n")])]),s._v(" "),t("h2",[t("strong",[s._v("用promise对象实现Ajax操作")])]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" getJSON = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("url")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" promise = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Promise")]),s._v("("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("resolve, reject")]),s._v(")")]),s._v("{\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" handler = "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n      "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".readyState !== "),t("span",{staticClass:"hljs-number"},[s._v("4")]),s._v(") {\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(";\n      }\n      "),t("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" ("),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".status === "),t("span",{staticClass:"hljs-number"},[s._v("200")]),s._v(") {\n        resolve("),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".response);\n      } "),t("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n        reject("),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Error")]),s._v("("),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".statusText));\n      }\n    };\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" client = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" XMLHttpRequest();\n    client.open("),t("span",{staticClass:"hljs-string"},[s._v('"GET"')]),s._v(", url);\n    client.onreadystatechange = handler;\n    client.responseType = "),t("span",{staticClass:"hljs-string"},[s._v('"json"')]),s._v(";\n    client.setRequestHeader("),t("span",{staticClass:"hljs-string"},[s._v('"Accept"')]),s._v(", "),t("span",{staticClass:"hljs-string"},[s._v('"application/json"')]),s._v(");\n    client.send();\n\n  });\n\n  "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" promise;\n};\n\ngetJSON("),t("span",{staticClass:"hljs-string"},[s._v('"/posts.json"')]),s._v(").then("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("json")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),t("span",{staticClass:"hljs-string"},[s._v("'Contents: '")]),s._v(" + json);\n}, "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v("("),t("span",{staticClass:"hljs-params"},[s._v("error")]),s._v(") ")]),s._v("{\n  "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".error("),t("span",{staticClass:"hljs-string"},[s._v("'出错了'")]),s._v(", error);\n});\n")])]),s._v(" "),t("h1",[s._v("四、与Async await的区别")]),s._v(" "),t("p",[s._v("原文链接："),t("a",{attrs:{href:"https://blog.csdn.net/qq_37617413/article/details/90637694"}},[s._v("https://blog.csdn.net/qq_37617413/article/details/90637694")])]),s._v(" "),t("h3",[s._v("js中同步、异步")]),s._v(" "),t("p",[s._v("**js的同步和异步问题通常是指ajax的回调、定时任务等等，如果是同步调用，程序在发出ajax调用后就会暂停，直到远程服务器产生回应后才会继续运行。而如果是异步调用，程序发出ajax调用后不会暂停，而是立即执行后面的代码，服务器返回信息后会自动触发回调函数进行处理。**相比较而言，异步调用的性能最佳，程序不会出现卡顿的现象，而同步调用则通常用于需要立即获得结果并实时处理的情况。")]),s._v(" "),t("blockquote",[t("p",[s._v("promise和async/await都是处理异步请求，写法和用法不甚相同，先有的promise，而后有的async/await，后者是为了让我们的代码写的时候看上去更加【同步】，async/await是寄生于Promise，Generater的语法糖")])]),s._v(" "),t("h3",[s._v("Promise写法")]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" p = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),t("span",{staticClass:"hljs-built_in"},[s._v("Promise")]),s._v("("),t("span",{staticClass:"hljs-function"},[s._v("("),t("span",{staticClass:"hljs-params"},[s._v("resolve,reject")]),s._v(") =>")]),s._v(" {\n        "),t("span",{staticClass:"hljs-comment"},[s._v("//...")]),s._v("\n        resolve("),t("span",{staticClass:"hljs-string"},[s._v("'success'")]),s._v(")\n    });\n"),t("span",{staticClass:"hljs-comment"},[s._v("// 或者说 类似 p = ajax('/users')一个异步请求")]),s._v("\n    p.then("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[s._v("result")]),s._v(" =>")]),s._v(" {\n        "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(result);"),t("span",{staticClass:"hljs-comment"},[s._v("//success")]),s._v("\n    }).catch("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[s._v("err")]),s._v(" =>")]),s._v(" {\n\t\t\t\t"),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(err);"),t("span",{staticClass:"hljs-comment"},[s._v("//error")]),s._v("\n\t\t});\n")])]),s._v(" "),t("h3",[s._v("async/await写法")]),s._v(" "),t("p",[s._v("async用于申明一个function是异步的，而await可以认为是async wait的简写，等待一个异步方法执行完成。\n规则：\n1 "),t("strong",[s._v("async和await是配对使用的，await存在于async的内部。否则会报错")]),s._v("\n2 await表示在这里等待一个promise返回，再接下来执行\n3 await后面跟着的应该是一个promise对象，（也可以不是，如果不是接下来也没什么意义了…）")]),s._v(" "),t("p",[s._v("4 await后面的语句都相当于一个回调里的内容，promise.then()中的回调")]),s._v(" "),t("pre",[t("code",{staticClass:"language-jsx"},[t("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),t("span",{staticClass:"hljs-title"},[s._v("demo")]),s._v("("),t("span",{staticClass:"hljs-params"}),s._v(") ")]),s._v("{\n\t"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" result01 = "),t("span",{staticClass:"hljs-keyword"},[s._v("await")]),s._v(" sleep("),t("span",{staticClass:"hljs-number"},[s._v("100")]),s._v(");\n\t"),t("span",{staticClass:"hljs-comment"},[s._v("//上一个await执行之后才会执行下一句")]),s._v("\n\t"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" result02 = "),t("span",{staticClass:"hljs-keyword"},[s._v("await")]),s._v(" sleep(result01 + "),t("span",{staticClass:"hljs-number"},[s._v("100")]),s._v(");\n\t"),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" result03 = "),t("span",{staticClass:"hljs-keyword"},[s._v("await")]),s._v(" sleep(result02 + "),t("span",{staticClass:"hljs-number"},[s._v("100")]),s._v(");\n\t"),t("span",{staticClass:"hljs-comment"},[s._v("// console.log(result03);")]),s._v("\n\t"),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" result03;\n\t}\n\t中间也可以用"),t("span",{staticClass:"hljs-keyword"},[s._v("try")]),s._v(" "),t("span",{staticClass:"hljs-keyword"},[s._v("catch")]),s._v("捕获错误\n\t\t"),t("span",{staticClass:"hljs-keyword"},[s._v("try")]),s._v(" {\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" result = "),t("span",{staticClass:"hljs-keyword"},[s._v("await")]),s._v(" p;\n    }"),t("span",{staticClass:"hljs-keyword"},[s._v("catch")]),s._v("(e) {\n        "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(e);\n    }\n")])]),s._v(" "),t("h3",[s._v("总结")]),s._v(" "),t("p",[s._v("1、 promise是ES6，async/await是ES7\n2、 async/await相对于promise来讲，写法更加优雅\n3 、reject状态：\n1）promise错误可以通过catch来捕捉，建议尾部捕获错误，\n2）async/await是promise的语法糖，await后面的内容相当于promise的.then，try-catch相当于promise的.catch")])])}]},e=t("VU/8")(null,n,!1,null,null,null);a.default=e.exports},EgZl:function(s,a,t){s.exports=t("5tt0")}});
//# sourceMappingURL=30.b898e18c9ec379c72dd4.js.map