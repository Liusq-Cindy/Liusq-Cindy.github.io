webpackJsonp([32],{"1Uy5":function(s,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var l={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("section",[a("p",[s._v("lodash中使用频率最高的，应该就是"),a("a",{attrs:{href:"https://www.lodashjs.com/docs/lodash.get"}},[s._v("_.get()")]),s._v("方法去根据路径获取对象的值了。他的使用方式非常简单:")]),s._v(" "),a("pre",[a("code",{staticClass:"language-jsx"},[s._v("_.get(object, path, [defaultValue])\n"),a("span",{staticClass:"hljs-comment"},[s._v("// 根据 object对象的path路径获取值。 如果解析 value 是 undefined 会以 defaultValue 取代。")]),s._v("\n")])]),s._v(" "),a("p",[s._v("这样我们可以使用如："),a("em",[s._v(".get(object, 'a[0].c', 'default'); 获取对象n级路径下的值，如果中间路径值为空，返回默认值，以免直接使用a[0].c时因a[0]为undefind造成undefind.c报错。那么lodash中是如何实现")]),s._v(".get()方法的呢？")]),s._v(" "),a("p",[s._v("下面 Po 一段 lodash 中 _.get方法的实现（主要功能及解释）：")]),s._v(" "),a("pre",[a("code",{staticClass:"language-jsx"},[a("span",{staticClass:"hljs-comment"},[s._v("// 1、主方法 get")]),s._v("\n"),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("get")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("object, path, defaultValue")]),s._v(") ")]),s._v("{\n  "),a("span",{staticClass:"hljs-comment"},[s._v("// 判断object是否为null,如果不是，调用baseGet方法获取object的path路径下的值")]),s._v("\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" result = object == "),a("span",{staticClass:"hljs-literal"},[s._v("null")]),s._v(" ? "),a("span",{staticClass:"hljs-literal"},[s._v("undefined")]),s._v(" : baseGet(object, path) \n "),a("span",{staticClass:"hljs-comment"},[s._v("// 若结果是undefined，则返回默认值")]),s._v("\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" result === "),a("span",{staticClass:"hljs-literal"},[s._v("undefined")]),s._v(" ? defaultValue : result\n}\n\n"),a("span",{staticClass:"hljs-comment"},[s._v("// 2、baseGet方法 获取对象路径下的值")]),s._v("\n"),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("baseGet")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("object, path")]),s._v(") ")]),s._v("{\n\t"),a("span",{staticClass:"hljs-comment"},[s._v("// castPath方法获取object的path")]),s._v("\n  **path = castPath(path, object)**\n\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("let")]),s._v(" index = "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" length = path.length\n  \n\t"),a("span",{staticClass:"hljs-comment"},[s._v("//如果object不为null且当前index < 路径的长度时，获取object的值,更新object")]),s._v("\n  **"),a("span",{staticClass:"hljs-keyword"},[s._v("while")]),s._v(" (object != "),a("span",{staticClass:"hljs-literal"},[s._v("null")]),s._v(" && index < length) {\n    object = object[toKey(path[index++])] "),a("span",{staticClass:"hljs-comment"},[s._v("// 将path数组中的值转为key")]),s._v("\n  }**\n\t"),a("span",{staticClass:"hljs-comment"},[s._v("// 最后一级，返回object或者返回 undefined")]),s._v("\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" (index && index == length) ? object : "),a("span",{staticClass:"hljs-literal"},[s._v("undefined")]),s._v("\n}\n\n"),a("span",{staticClass:"hljs-comment"},[s._v("// 以上涉及两个方法：（1）将castPath 获取 object中的path，转为数组")]),s._v("\n"),a("span",{staticClass:"hljs-comment"},[s._v("// （2）toKey 将path数组中对应的值转为key")]),s._v("\n\n"),a("span",{staticClass:"hljs-comment"},[s._v("// (1）castPath（path, object） 如castPath('a[b].c', object)")]),s._v("\n"),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("castPath")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("value, object")]),s._v(") ")]),s._v("{\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" ("),a("span",{staticClass:"hljs-built_in"},[s._v("Array")]),s._v(".isArray(value)) {\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" value "),a("span",{staticClass:"hljs-comment"},[s._v("// 如果value是个数组，直接返回")]),s._v("\n  }\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" isKey(value, object) ? [value] : stringToPath(value)\n\t"),a("span",{staticClass:"hljs-comment"},[s._v("// 其中，isKey方法判断value是不是object对象的获取key的合法路径，主要基于value的类型判断和正则匹配，具体可见[lodash的解释](https://github.com/Liusq-Cindy/lodash/blob/e0029485ab4d97adea0cb34292afb6700309cf16/.internal/isKey.js#L15)")]),s._v("\n\t"),a("span",{staticClass:"hljs-comment"},[s._v("// stringTopath方法，则是将字符串形式的路径，转化为数组，如将'a[0].c.d' 利用正则和字符串api转化为 ['a',0,'c','d'],具体可见[github](https://github.com/Liusq-Cindy/lodash/blob/e0029485ab4d97adea0cb34292afb6700309cf16/.internal/isKey.js#L15)")]),s._v("\n}\n\n"),a("span",{staticClass:"hljs-comment"},[s._v("//（2）toKey(path[index++]) 将path数组中对应的值转为key")]),s._v("\n"),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" INFINITY = "),a("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(" / "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\n"),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("toKey")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("value")]),s._v(") ")]),s._v("{\n\t"),a("span",{staticClass:"hljs-comment"},[s._v("// 如果数组中取到的key是字符串或isSymbol为true,则返回字符串")]),s._v("\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" ("),a("span",{staticClass:"hljs-keyword"},[s._v("typeof")]),s._v(" value === "),a("span",{staticClass:"hljs-string"},[s._v("'string'")]),s._v(" || isSymbol(value)) {\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" value\n  }\n\t"),a("span",{staticClass:"hljs-comment"},[s._v("// 此外，判断+-0，或者返回value本身，如纯数字 ")]),s._v("\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" result = "),a("span",{staticClass:"hljs-string"},[s._v("`"),a("span",{staticClass:"hljs-subst"},[s._v("${value}")]),s._v("`")]),s._v("\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" (result == "),a("span",{staticClass:"hljs-string"},[s._v("'0'")]),s._v(" && ("),a("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(" / value) == -INFINITY) ? "),a("span",{staticClass:"hljs-string"},[s._v("'-0'")]),s._v(" : result\n}\n")])]),s._v(" "),a("p",[s._v("以上为lodash中get方式获取path路径下的主流程，更多复杂的如isKey判断和字符串转path数组，可查看"),a("a",{attrs:{href:"https://github.com/Liusq-Cindy/lodash/blob/master/get.js"}},[s._v("github-get.js")]),s._v("中具体的实现。")]),s._v(" "),a("h3",[s._v("学习及感悟：")]),s._v(" "),a("p",[s._v("1、（1）每一级处理，都需要有判空的判断，避免流程阻断（3）对象获取下一级路径的值时，这里的while方法，要判断新的object是否为null；（3）在获取对象的下一级键值时，使用的是object[key]的方式，这样可以兼容获取a[2]及a['b']这两种形式。")]),s._v(" "),a("p",[s._v("2、学习isKey方法：判断 value 是否是Object的合法路径，并不是简单object[value]就能了事了")]),s._v(" "),a("pre",[a("code",{staticClass:"language-jsx"},[a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" reIsDeepProp = "),a("span",{staticClass:"hljs-regexp"},[s._v("/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/")]),s._v("\n"),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" reIsPlainProp = "),a("span",{staticClass:"hljs-regexp"},[s._v("/^\\w*$/")]),s._v("\n"),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("isKey")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("value, object")]),s._v(") ")]),s._v("{\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (isArray(value)) { "),a("span",{staticClass:"hljs-comment"},[s._v("// 数组，直接返回false")]),s._v("\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-literal"},[s._v("false")]),s._v(";\n  }\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" type = "),a("span",{staticClass:"hljs-keyword"},[s._v("typeof")]),s._v(" value; "),a("span",{staticClass:"hljs-comment"},[s._v("// 对应的几种类型：number,symbol，boolean, null，还有isSymbol判断直接返回true")]),s._v("\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (type == "),a("span",{staticClass:"hljs-string"},[s._v("'number'")]),s._v(" || type == "),a("span",{staticClass:"hljs-string"},[s._v("'symbol'")]),s._v(" || type == "),a("span",{staticClass:"hljs-string"},[s._v("'boolean'")]),s._v(" ||\n      value == "),a("span",{staticClass:"hljs-literal"},[s._v("null")]),s._v(" || isSymbol(value)) {\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v(";\n  }\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != "),a("span",{staticClass:"hljs-literal"},[s._v("null")]),s._v(" && value "),a("span",{staticClass:"hljs-keyword"},[s._v("in")]),s._v(" "),a("span",{staticClass:"hljs-built_in"},[s._v("Object")]),s._v("(object));\n")])]),s._v(" "),a("p",[s._v("（1）、reIsPlainProp很好理解，\\w 匹配字母或数字或下划线或汉字 等价于 ‘[A-Za-z0-9_]’，*表示0次或多次，即 reIsDeepProp.test(value) 表示value为任意数字及下划线")]),s._v(" "),a("p",[s._v("（2）、value in Object(object) 表示value是object的一个键值")]),s._v(" "),a("p",[s._v("（3）、reIsDeepProp正则表达式，用来匹配属性名里包含路径属性 例如什么. [] \\这种")])])}]},e=a("VU/8")(null,l,!1,null,null,null);t.default=e.exports},RuYN:function(s,t,a){s.exports=a("1Uy5")}});
//# sourceMappingURL=32.5e57c15638faa78b2aa8.js.map